<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.lives_mode = false then global.billy_lives = 999999

background_xscroll0 = 0
background_xscroll1 = 0
background_xscroll2 = 0
background_xscroll3 = 0
background_xscroll4 = 0

background_yscroll0 = 0
background_ystart0 = background_y[0]
background_ystart1 = background_y[1]
background_ystart2 = background_y[2]
background_ystart3 = background_y[3]
background_ystart4 = background_y[4]

if room &lt; room17
{
global.level = room
ini_open("save.ini")
ini_write_real("stuff","level",global.level)
ini_close()
}
instance_create(x,y,obj_player_crush)
///Initialize Variables
image_speed = 0;
hsp = 0;
vsp = 0;
dir = 1;
hp = 3;
max_hp = 3;
hit= false;
time_hit = 0

if global.control_type = "snappy" {grav = 0.45;}
if global.control_type = "floaty" {grav = 0.35;}
if global.control_type = "snappy" {original_movespeed = 2.3;}
if global.control_type = "floaty" {original_movespeed = 2.3;}
if global.control_type = "snappy"{jumpspeed = 7.5;}
if global.control_type = "floaty" {jumpspeed = 7;}

movespeed = original_movespeed;
landed = true
spinning = false
kyote_time = 0
do_kyote_time = false
sparkle_x = irandom_range(0,24)
sparkle_y = irandom_range(0,24)
star_twinkle_time = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// sunrise bg
if background_index[0] = bg_sunrise
{
background_x[0] = view_xview[0]
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main shit
if global.paused = false
{
//Get the player's input
key_right = sign( keyboard_check(vk_right) + keyboard_check(ord("D")) );
key_left = sign (-keyboard_check(vk_left) + -keyboard_check(ord("A")) );
key_jump = sign ( keyboard_check_pressed(ord("Z")) + keyboard_check_pressed(vk_space) );
key_jump_held = sign ( keyboard_check(ord("Z")) + keyboard_check(vk_space) );

if key_jump
{
if place_meeting(x,y+1,obj_wall) or place_meeting(x,y+1,obj_slope_parent) audio_play_sound(snd_jump,0,0)
}

image_xscale = dir
if key_right dir = 1
if -key_left dir = -1
if hit = false {
if key_right or -key_left
{
image_speed = 0.25
}
else
{
if spinning = false image_speed = 0
if spinning = false image_index = 0
}
}
if !place_meeting(x,y+2,obj_wall) and !place_meeting(x,y+2,obj_slope_parent)
{
sprite_index = spr_jump
}
else if spinning = false sprite_index = spr_player

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if place_meeting(x,y+1,obj_wall) or place_meeting(x,y+1,obj_slope_parent)
{
    vsp = key_jump * -jumpspeed
}
//Control jump height
if (vsp &lt; 0) &amp;&amp; (!key_jump_held) vsp = max(vsp,-jumpspeed/3)

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;
//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
// Vertical slope collision
if (place_meeting(x,y+vsp,obj_slope_parent))
{
    while(!place_meeting(x,y+sign(vsp),obj_slope_parent))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
if image_index = 0 
{
if key_right or -key_left
{
if sprite_index = spr_player audio_play_sound(snd_step,0,0)
}
}

if instance_exists(obj_slice)
{
sprite_index = spr_player_slice
}

if ( keyboard_check_pressed(ord("X")) or keyboard_check_pressed(vk_control) ) and !keyboard_check(ord("C"))
{
if !instance_exists(obj_slice)
{
if dir = 1 instance_create(x+16,y,obj_slice)
if dir = -1 instance_create(x-16,y,obj_slice)
audio_play_sound(snd_slice,0,0)
}
}
//running
if keyboard_check(ord("X")) or  keyboard_check(ord("C")) or keyboard_check(vk_shift) or keyboard_check(vk_control)
{
if keyboard_check(vk_right) or keyboard_check(vk_left)
{
if movespeed &lt; 4
{
movespeed += 0.03
}}}
else if movespeed &gt;= original_movespeed then movespeed -= 0.03

if keyboard_check(ord("C")) or keyboard_check(vk_shift) or keyboard_check(vk_control)
{
if movespeed &lt; 4
{
movespeed += 0.03
}}


if !key_right &amp; !-key_left &amp; !keyboard_check(ord("C")) &amp; !keyboard_check(vk_shift) &amp; !keyboard_check(vk_control)
{
if movespeed &gt;= original_movespeed then movespeed -= 0.5
}

//invincibility frames
if hit = true
{
sprite_index = spr_hit
image_speed = 0.5
//movespeed = 0
time_hit ++
}

if time_hit &gt; 40
{
hit = false
sprite_index = spr_player
movespeed = original_movespeed
time_hit = 0
}

//death
if hp = 0 then instance_change(obj_dead,true)

if y &gt; room_height then instance_change(obj_dead,true)

//smoke
if movespeed &gt; 4
{
if vsp = 0 {if image_index = 1 instance_create(x,y+10,obj_smokepuff)}
if vsp != 0 {if !place_meeting(x,y,obj_smokepuff) instance_create(x,y+10,obj_smokepuff)}
}
//extra health
if hp &lt;= 3 max_hp = 3
//mask
mask_index = spr_player_mask

//stars bg
if background_index[0] == bg_stars
{
star_twinkle_time += 1
if star_twinkle_time &gt; 30 {star_twinkle_time = 0}
if star_twinkle_time = 30 {background_index = bg_stars_1}
}
if background_index[0] == bg_stars_1
{
star_twinkle_time += 1
if star_twinkle_time &gt; 30 {star_twinkle_time = 0}
if star_twinkle_time = 30 {background_index = bg_stars_2}
}
if background_index[0] == bg_stars_2
{
star_twinkle_time += 1
if star_twinkle_time &gt; 30 {star_twinkle_time = 0}
if star_twinkle_time = 30 {background_index = bg_stars}
}
//spinning
if keyboard_check_pressed(ord("C")) or keyboard_check_pressed(vk_shift)
{spinning = true}
if keyboard_check_released(ord("C"))  or keyboard_check_released(vk_shift)
{spinning = false}
if spinning = true and hit = false
{
sprite_index = spr_player_spin
image_speed = 0.5
}
}
//masking
mask_index = spr_player_mask;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG CODE
if keyboard_check_pressed(ord("R"))
{
room_restart()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>117</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_snap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///moving_platforms
if global.paused = false
{
if place_meeting(x,y+3,obj_moving_platform)
{
y+= instance_place(x,y+3,obj_moving_platform).yspeed
}

if place_meeting(x,y+3,obj_moving_platform)
{
x+= instance_place(x,y+3,obj_moving_platform).xspeed
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera
view_xview[0] = clamp(x-view_wview[0]/2,0,room_width-view_wview[0])
view_yview[0] = clamp(y-view_hview[0]/2,0,room_height-view_hview[0])
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///landing dust
if global.paused = false
{
if landed = false
{
if place_meeting(x,y+2,obj_wall)
{
if !instance_exists(obj_landing_dust) instance_create(x,y+12,obj_landing_dust)
landed = true
}
}
if vsp != 0
{
landed = false
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pausing
if global.paused = true
{
image_speed = 0
audio_pause_all()
if keyboard_check_pressed(vk_enter) global.paused = false
}
else
{
audio_resume_all()
if keyboard_check_pressed(vk_enter)
{
global.paused = true
}
}

if global.paused = true
{
if !instance_exists(obj_exit_to_title)
{instance_create(view_xview[0]+336,view_yview[0]+48,obj_exit_to_title)}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///paralax scrolling

//background_x[0] += hsp/6

background_xscroll0 += background_hspeed[0]
if background_index[0] != bg_sunrise {
background_x[0] = ( (view_xview[0]/1.1) + background_xscroll0 )
}
//background_x[1] += hsp/4

background_xscroll1 += background_hspeed[1]
background_x[1] = ((view_xview[0]/2) + background_xscroll1 )
//background_x[2] += hsp/3

background_xscroll2 += background_hspeed[2]
background_x[2] = ( (view_xview[0]/4) + background_xscroll2 )
//background_x[3] += hsp/3

background_xscroll3 += background_hspeed[3]
background_x[3] = ( (view_xview[0]/6) + background_xscroll3 )
//background_x[4] += hsp/2

background_xscroll4 += background_hspeed[4]
background_x[4] = (  (view_xview[0]/8) + background_xscroll4 )



background_yscroll0 += background_vspeed[0]
background_y[0] = ( (view_yview[0]/1.1) + background_yscroll0 )
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///slopes
if place_meeting(x+hsp,y+vsp,obj_slope_parent)
{
//dont get stuck
if place_meeting(x,y+1,obj_wall) y -=1
if place_meeting(x,y-1,obj_wall) y +=1

if !place_meeting(x,y+vsp,obj_wall)
{
//45 degree
//right
if place_meeting(x,y+vsp,obj_slope45_r)
{y-= hsp}
//left
if place_meeting(x,y+vsp,obj_slope45_l)
{y+= hsp}
//22 degree
//right
if place_meeting(x,y+vsp,obj_slope22_r)
{y-= hsp/2}
//left
if place_meeting(x,y+vsp,obj_slope22_l)
{y+= hsp/2}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sparkles
if global.beaten = 1
{
sparkle_x = irandom_range(-12,12)
sparkle_y = irandom_range(-12,12)
instance_create(x+sparkle_x,y+sparkle_y,obj_sparkle)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_heart_tank">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_hp = 6
hp = 6
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_heart">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_gain_hp,0,0)
if hp &lt; max_hp hp += 1
with obj_heart
{
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_set_color(c_white)
if global.paused = false
{
draw_sprite(spr_hp,hp,view_xview[0]+5,view_yview[0]+5)
draw_set_font(fnt_press_start)
draw_sprite(spr_gem_gui,0,view_xview+8,view_yview+19)
draw_text(view_xview+17,view_yview+19,string(global.gems))

}
if global.paused = true
{
draw_sprite(spr_pause,0,view_xview[0],view_yview[0])
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
